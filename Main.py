import time
from token_bot import TOKIN
from aiogram import Bot, Dispatcher, executor, types
import markups as nav
from aiofiles import os
# from  time import sleep
# import aioschedule
# import asyncio

from connect_bd import *
from markups import *

bot = Bot(token=TOKIN, parse_mode="HTML")
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    if message.chat.type == 'private':
        hello_user = read_user(message["from"])
        await bot.send_message(message.from_user.id, f'{hello_user} {message["from"]["first_name"]}'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à API —Ç–æ–∫–µ–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".\n'
                               '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç WB.\n'
                               '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º API, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å --> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> –î–æ—Å—Ç—É–ø –∫ API.\n'
                               '–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤:\n\n'
                               '1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤: –¶–µ–Ω—ã, –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏, –ö–æ–Ω—Ç–µ–Ω—Ç, Marketplace, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –û—Ç–∑—ã–≤—ã, –í–æ–ø—Ä–æ—Å—ã.\n'
                               '2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n'
                               '3. –†–µ–∫–ª–∞–º–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –†–µ–∫–ª–∞–º–∞.\n'
                               '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è. –ï–≥–æ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ–ª—å—à–µ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, '–ö–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ–∫–µ–Ω "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤–∞–º –Ω–µ–æ—Ö–æ–¥–∏–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ñ–µ—Ä—Ç—É.\n\n'
                               '–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–º —Å–≤–æ–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –æ—Ñ–µ—Ä—Ç—ã –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –µ—ë —É—Å–ª–æ–≤–∏—è–º–∏.'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã.'.format(message.from_user), reply_markup=nav.mainMenu)


@dp.message_handler(commands=["help"])
async def command_start(message: types.Message):
    if message.chat.type == 'private':
        text_str = "help"
        updata_chapter(message.from_user.id, text_str)
        await bot.send_message(message.from_user.id, f'{message["from"]["first_name"]} –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à API —Ç–æ–∫–µ–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".\n'
                               '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç WB.\n'
                               '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º API, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å --> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> –î–æ—Å—Ç—É–ø –∫ API.\n'
                               '–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤:\n\n'
                               '1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤: –¶–µ–Ω—ã, –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏, –ö–æ–Ω—Ç–µ–Ω—Ç, Marketplace, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –û—Ç–∑—ã–≤—ã, –í–æ–ø—Ä–æ—Å—ã.\n'
                               '2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n'
                               '3. –†–µ–∫–ª–∞–º–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –†–µ–∫–ª–∞–º–∞.\n'
                               '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è. –ï–≥–æ –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ–ª—å—à–µ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, '–ö–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ–∫–µ–Ω "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤–∞–º –Ω–µ–æ—Ö–æ–¥–∏–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ñ–µ—Ä—Ç—É.\n\n'
                               '–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–º —Å–≤–æ–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –æ—Ñ–µ—Ä—Ç—ã –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –µ—ë —É—Å–ª–æ–≤–∏—è–º–∏.'.format(message.from_user), reply_markup=nav.mainMenu)
        await bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã.'.format(message.from_user), reply_markup=nav.mainMenu)

@dp.message_handler(text="–ü–µ—Ä–µ–¥–∞—Ç—å API")
async def api_ststistica_wb(message: types.Message):
    if message.chat.type == 'private':
        text_str = "–ü–µ—Ä–µ–¥–∞—Ç—å API"
        updata_chapter(message.from_user.id, text_str)
        await bot.send_message(message.from_user.id, '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω\n'
                               '2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.\n'
                               '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–≥–æ –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è.\n\n'
                               '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ \n\n'
                               '"–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"\n'
                               '–î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã.'.format(message.from_user), reply_markup=nav.mainMenu)

@dp.message_handler(text="–û—Ñ–µ—Ä—Ç–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞")
async def api_oferta_wb(message: types.Message):
    if message.chat.type == 'private':
        text_str = "–û—Ñ–µ—Ä—Ç–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞"
        updata_chapter(message.from_user.id, text_str)
        await bot.send_message(message.from_user.id, '–¢–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã'.format(message.from_user), reply_markup=nav.ofertaMenu)
        
@dp.message_handler(text="–°–æ–≥–ª–∞—Å–µ–Ω")
async def api_yes_wb(message: types.Message):
    if message.chat.type == 'private':
        text_str = "–°–æ–≥–ª–∞—Å–µ–Ω"
        updata_chapter(message.from_user.id, text_str)
        await bot.send_message(message.from_user.id, '–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π'.format(message.from_user), reply_markup=nav.mainMenu)
        
@dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def api_main_wb(message: types.Message):
    if message.chat.type == 'private':
        text_str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        updata_chapter(message.from_user.id, text_str)
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.format(message.from_user), reply_markup=nav.mainMenu)
        
@dp.message_handler(content_types=types.ContentType.USER_SHARED)
async def on_user_shared(message: types.Message):
    req_cont = create_comtact(message.from_user.id, message.user_shared.user_id)
    await bot.send_message(message.from_user.id, f"{req_cont}.".format(message.from_user), reply_markup=nav.mainMenu)

@dp.message_handler(text="sales")
async def get_no_sales_wb(message: types.Message):
    get_satat = get_satat_wb() #https://www.wildberries.ru/catalog/{satat}/detail.aspx\n
    for item_id_user in get_satat[6]:
        try:
            for index, satat in enumerate(get_satat[0]):
                await bot.send_message(item_id_user,
                                    f'–ê—Ä—Ç–∏–∫—É–ª - {get_satat[1][index]}\n'
                                    f'Ã∂Ã∂ü§ë  –ù–∞–∑–≤–∞–Ω–∏–µ - {get_satat[2][index]}\n'
                                    f'üí∞Ã∂Ã∂  –ù–∞ —Å–∫–ª–∞–¥–∞—Ö {get_satat[3][index]} —à—Ç.\n'
                                    f'üí∏Ã∂Ã∂  –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é {get_satat[4][index]}\n'
                                    f'üíµ  –°—Å—ã–ª–∫–∞: {get_satat[5][index]}'.format(message.from_user))
            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
        except Exception as ex:
                logging.exception(ex)
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
    await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞")
        
        
@dp.message_handler(text="stocks")
async def get_add_stocks_wb(message: types.Message):
    get_add_stocks = created_xlsx_user()
    for index_id, id in enumerate(get_add_stocks[0]):
        for item_cont in id:
            try:
                await bot.send_document(chat_id=item_cont, document=open(get_add_stocks[1][index_id], 'rb'))
                await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
            except Exception as ex:
                logging.exception(ex)
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        await os.remove(get_add_stocks[1][index_id])
        time.sleep(0.3)
    await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞")
        
        
# @dp.message_handler()    
# async def noon_print():
#     await bot.send_message(chat_id=1323522063, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 111111')
#     # await bot.send_message(chat_id=1464515838, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 111111')
    
# async def scheduler():
#     aioschedule.every().day.at("18:00").do(noon_print)
#     aioschedule.every().day.at("18:01").do(noon_print)
#     while True:
#         await aioschedule.run_pending()

# async def on_startup(_):
#     asyncio.create_task(scheduler())  


@dp.message_handler()
async def bot_message_help(message: types.Message): 
    chapter_user = get_chapter_user(message.from_user.id)
    if chapter_user == "start":
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"', reply_markup=nav.mainMenu)
    elif chapter_user == "help":
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"', reply_markup=nav.mainMenu)
    elif chapter_user == "–û—Ñ–µ—Ä—Ç–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞":
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"', reply_markup=nav.mainMenu)
    elif chapter_user == "–°–æ–≥–ª–∞—Å–µ–Ω":
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"', reply_markup=nav.mainMenu)
    elif chapter_user == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await bot.send_message(message.from_user.id, f'–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message["from"]["first_name"]}.\n'
                               '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"', reply_markup=nav.mainMenu)
    elif chapter_user == "–ü–µ—Ä–µ–¥–∞—Ç—å API":
        api = get_api_wb(message.text)
        if api == 200:
            req = created_user_api(message.from_user.id, message.text)
            if req == "–î–∞":
                await bot.send_message(message.from_user.id, '–í–∞—à —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç. –ñ–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.', reply_markup=nav.mainMenu)
            elif req == "–ù–µ—Ç":
                await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –±–æ—Ç–∞.', reply_markup=nav.mainMenu)
        elif api == 400:
            await bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', reply_markup=nav.mainMenu)
        elif api == 401:
            await bot.send_message(message.from_user.id, '–í–∞—à —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–∞.', reply_markup=nav.mainMenu)
        elif api == 408:
            await bot.send_message(message.from_user.id, '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.', reply_markup=nav.mainMenu)
        elif api == 429:
            await bot.send_message(message.from_user.id, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å—Ç–æ–≤', reply_markup=nav.mainMenu)
        else:
            await bot.send_message(message.from_user.id, '–í–∞—à —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–∞.', reply_markup=nav.mainMenu)
    else:
        await bot.send_message(message.from_user.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.', reply_markup=nav.mainMenu)        
    
if __name__ == '__main__':
    # executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    executor.start_polling(dp, skip_updates=True)